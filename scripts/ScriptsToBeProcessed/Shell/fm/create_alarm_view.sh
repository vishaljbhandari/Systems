 $1 << EOF

DROP VIEW SUBSCRIBER_V;
DROP VIEW ALARM_VIEWS ;
DROP VIEW SUBSCRIBER_MLH;

CREATE OR REPLACE VIEW SUBSCRIBER_MLH
AS
SELECT S.*,A.PARENT_ID,A.HIERARCHY_ID
FROM SUBSCRIBER S,ACCOUNT A
WHERE A.ID = S.ACCOUNT_ID
AND S.SUBSCRIBER_TYPE != 2
AND A.ACCOUNT_TYPE != 2  ;

CREATE OR REPLACE VIEW SUBSCRIBER_V (
	ACCOUNT_ID,
	ACCOUNT_NAME,
	ACCOUNT_DOA,
	NETWORK_ID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE_1,
	ADDRESS_LINE_2,
	ADDRESS_LINE_3,
	CITY,
	POST_CODE,
	CREDIT_LIMIT,
	RATE_PLAN,
	MODIFIED_DATE,
	SUBSCRIBER_ID,
	PHONE_NUMBER,
	SUBSCRIBER_DOA,
	HOME_PHONE_NUMBER,
	OFFICE_PHONE_NUMBER,
	CONTACT_PHONE_NUMBER,
	MCN1,
	MCN2,
	IMSI,
	IMEI,
	CONNECTION_TYPE,
	GROUPS,
	SERVICES,
	STATUS,
	QOS,
	PRODUCT_TYPE
	)
AS SELECT 
	A.ID,
	A.ACCOUNT_NAME,
	A.ACCOUNT_DOA,
	S.NETWORK_ID,
	A.FIRST_NAME,
	A.MIDDLE_NAME,
	A.LAST_NAME,
	A.ADDRESS_LINE_1,
	A.ADDRESS_LINE_2,
	A.ADDRESS_LINE_3,
	A.CITY,
	A.POST_CODE,
	A.CREDIT_LIMIT,
	A.RATE_PLAN,
	S.MODIFIED_DATE,
	S.ID,
	S.PHONE_NUMBER,
	S.SUBSCRIBER_DOA,
	S.HOME_PHONE_NUMBER,
	S.OFFICE_PHONE_NUMBER,
	S.CONTACT_PHONE_NUMBER,
	S.MCN1,
	S.MCN2,
	S.IMSI,
	S.IMEI,
	S.CONNECTION_TYPE,
	S.GROUPS,
	S.SERVICES,
	S.STATUS,
	S.QOS,
	S.PRODUCT_TYPE
FROM ACCOUNT A, SUBSCRIBER S
WHERE  A.ID = S.ACCOUNT_ID  ;

CREATE OR REPLACE VIEW ALARM_VIEWS
AS
(
	SELECT NETWORK_ID, ID, REFERENCE_ID, CASE_ID, ALERT_COUNT, CREATED_DATE, MODIFIED_DATE,
    	STATUS, USER_ID, SCORE, VALUE, CDR_COUNT, PENDING_TIME,IS_VISIBLE, DISPLAY_VALUE, 
		RULE_IDS, REFERENCE_TYPE, REFERENCE_VALUE, 0 as SERVICE_NUMBER_TYPE
		FROM ALARMS
) ;


CREATE OR REPLACE VIEW CASE_ALARM_VIEWS
AS
(
        SELECT AV.NETWORK_ID, AV.ID, AV.REFERENCE_ID, AV.CASE_ID, AV.ALERT_COUNT, AV.CREATED_DATE, AV.MODIFIED_DATE,
        AV.STATUS, AV.USER_ID, AV.SCORE, AV.VALUE, AV.CDR_COUNT, AV.PENDING_TIME, 
		AV.IS_VISIBLE, AV.DISPLAY_VALUE, AV.RULE_IDS, AV.REFERENCE_TYPE, AV.REFERENCE_VALUE,  AV.SERVICE_NUMBER_TYPE, '0' as IS_ARCHIVED
		FROM ALARM_VIEWS AV
UNION ALL
        SELECT AA.NETWORK_ID, AA.ID, AA.REFERENCE_ID, AA.CASE_ID, AA.ALERT_COUNT, AA.CREATED_DATE, AA.MODIFIED_DATE,
        AA.STATUS, AA.USER_ID, AA.SCORE, AA.VALUE, AA.CDR_COUNT, AA.PENDING_TIME, 
		AA.IS_VISIBLE, AA.DISPLAY_VALUE, AA.RULE_IDS, AA.REFERENCE_TYPE, AA.REFERENCE_VALUE,  AA.SERVICE_NUMBER_TYPE, '0' as IS_ARCHIVED
		FROM ARCHIVED_ALARMS AA WHERE AA.MODIFIED_DATE < ((select trunc(to_date(value, 'YYYY/MM/DD HH24:MI:SS')) from configurations  where config_key='CLEANUP.ALARMS.LAST_RUN_DATE') - (select to_number(value) from configurations where config_key= 'CLEANUP.ALARMS.INTERVAL_IN_DAYS'))
) ;

CREATE OR REPLACE VIEW RANGER_USERS_V
AS
( 
	SELECT RU.ID AS ID, RU.NAME AS USER_NAME, NVL((SELECT DISTINCT(1) FROM 
	RANGER_SESSIONS WHERE RANGER_USER_ID = RU.ID), 0) AS IS_ONLINE, RU.IS_LOCKED AS IS_LOCKED FROM RANGER_USERS RU
);

CREATE OR REPLACE VIEW ALARM_WORKFLOW_V AS (
    SELECT  WF_T.ID, A.NAME, WF_T.ALARM_ID, WF_T.ACTIVITY_ID, WF_T.USER_ID,
            WF_T.EXPECTED_COMPLETION_DATE, WF_T.ACTUAL_COMPLETION_DATE, WF_T.COMPLETED_BY, WF_T.STATUS, WF_T.POSITION,
            WF_T.IS_MANDATORY, A.IS_AUTOMATIC,WF_T.WORKFLOW_CONFIGURATION_ID
    FROM ACTIVITIES A, WORKFLOW_TRANSACTIONS WF_T
    WHERE A.ID = WF_T.ACTIVITY_ID
) ;

CREATE OR REPLACE VIEW ARCHIVED_ALARM_WORKFLOW_V AS (
    SELECT  WF_T.ID, A.NAME, WF_T.ALARM_ID, WF_T.ACTIVITY_ID, WF_T.USER_ID,
            WF_T.EXPECTED_COMPLETION_DATE, WF_T.ACTUAL_COMPLETION_DATE, WF_T.COMPLETED_BY, WF_T.STATUS, WF_T.POSITION,
            WF_T.IS_MANDATORY, A.IS_AUTOMATIC, WF_T.WORKFLOW_CONFIGURATION_ID
    FROM ARCHIVED_ACTIVITIES A, ARCHIVED_WORKFLOW_TRANSACTIONS WF_T
    WHERE A.ID = WF_T.ACTIVITY_ID
) ;

CREATE OR REPLACE VIEW ACTIVITIES_V AS (
    SELECT A.ID, A.NAME, A.DESCRIPTION, A.JEOPARDY_PERIOD, A.IS_AUTOMATIC, A.ACTIVITY_TEMPLATE_ID, AT.NAME AS TEMPLATE_NAME
    FROM ACTIVITIES A, ACTIVITY_TEMPLATES AT
    WHERE A.ACTIVITY_TEMPLATE_ID = AT.ID
) ;

CREATE OR REPLACE VIEW ALERT_OBSERVATION_SUMMARY_V
AS
(
    SELECT A.ALARM_ID, OS.SUMMARY_START_TIME, OS.RECORD_CONFIG_ID, SUM(OS.VALUE) AS VALUE, SUM(OS.COUNT) AS COUNT, SUM(OS.UPLOAD_VOLUME) AS UPLOAD_VOLUME, SUM(OS.DOWNLOAD_VOLUME) AS DOWNLOAD_VOLUME, SUM(OS.DURATION) AS DURATION
    FROM OBS_SUMMARY_RECORDS OS, ALERTS A
    WHERE A.ID = OS.ALERT_ID
    GROUP BY A.ALARM_ID, OS.ALERT_ID, OS.SUMMARY_START_TIME, OS.RECORD_CONFIG_ID
) ;

drop sequence workflow_transactions_seq ;
create sequence workflow_transactions_seq increment by 1 start with 1024 nomaxvalue nocycle cache 20 ;

COMMIT ;

EOF
